//创建有向图的邻接表
#include <iostream>
using namespace std;
const int MAXVNUM = 100;

typedef char VexType;
typedef struct AdjNode{  //定义邻接点类型
    int v; //临接点下标
    struct AdjNode *next;
}AdjNode;
typedef struct VexNode //  定义顶点类型
{
    VexType data;
    AdjNode *first;
}VexNode;
typedef struct{//定义邻接表类型
    VexNode Vex[MAXVNUM];
    int vexnum,edgenum;
}ALGraph;

int locatevex(ALGraph G, VexType x){  //找顶点信息的下标
    for (int i= 0; i<G.vexnum;i++){
        if (x == G.Vex[i].data){
            return i;
        }
    }
    return -1;
    
}

void insertedge(ALGraph &G, int i, int j){ //插入一条边
    AdjNode *s;
    s  = new AdjNode;
    s->v = j;
    s->next = G.Vex[i].first;
    G.Vex[i].first = s;
}

void printAL(ALGraph G){ //输出邻接表
    cout<<"邻接表如下"<<endl;
    for (int i=0; i< G.vexnum;i++){
        AdjNode *t = G.Vex[i].first;
        cout<<G.Vex[i].data<<endl;
        while(t!=NULL){
            cout<<"["<<t->v<<"]"<<endl;
            t = t->next;
        }
    }
}

void CreateALGraph(ALGraph &G){ //创建有向图邻接表  
    int i, j;
    VexType u,v;
    cout<<"输入顶点数和边数"<<endl;
    cin>>G.vexnum>>G.edgenum;
    cout<<"输入顶点信息"<<endl;
    for (int i=0;i<G.vexnum;i++){ 
        cin>>G.Vex[i].data;
    }
    for (int i=0;i<G.vexnum;i++){
        G.Vex[i].first = NULL;
    }
    cout<<"请依次输入每条边的两个顶点u和v"<<endl;
    while (G.edgenum--)
    {
        cin>>u>>v;
        i = locatevex(G, u);
        j = locatevex(G, v);
        if (i!=-1&&j!=-1){
            insertedge(G, i, j);
        }
        else{
            cout<<"输入有误,重新输入"<<endl;
            G.edgenum++;
        }
    }

}
int main(){
    ALGraph G;
    CreateALGraph(G);
    printAL(G);
    return 0;
}


